@import './func-common.css';

@PX_TO_REM: 1/75;

.mtfun(@counter) when (@counter < 200) {
  .mt-@{counter} {
    margin-top: unit(@counter * @PX_TO_REM, rem);
  }

  .mtfun((@counter + 5)); // 递归调用自身
}

.mt(@counter) {
  margin-top: unit(@counter * @PX_TO_REM, rem);
}

.mlfun(@counter) when (@counter < 200) {
  .ml-@{counter} {
    margin-left: unit(@counter * @PX_TO_REM, rem);
  }

  .mlfun((@counter + 5)); // 递归调用自身
}

.ml(@counter) {
  margin-left: unit(@counter * @PX_TO_REM, rem);
}

.mrfun(@counter) when (@counter < 200) {
  .mr-@{counter} {
    margin-right: unit(@counter * @PX_TO_REM, rem);
  }

  .mrfun((@counter + 5)); // 递归调用自身
}

.mr(@counter) {
  margin-right: unit(@counter * @PX_TO_REM, rem);
}

.mbfun(@counter) when (@counter < 200) {
  .mb-@{counter} {
    margin-bottom: unit(@counter * @PX_TO_REM, rem);
  }

  .mbfun((@counter + 5)); // 递归调用自身
}

.mb(@counter) {
  margin-bottom: unit(@counter * @PX_TO_REM, rem);
}

.ma() {
  margin-left: auto;
  margin-right: auto;
}

.ptfun(@counter) when (@counter < 200) {
  .pt-@{counter} {
    padding-top: unit(@counter * @PX_TO_REM, rem);
  }

  .ptfun((@counter + 5)); // 递归调用自身
}

.pt(@counter) {
  padding-top: unit(@counter * @PX_TO_REM, rem);
}

.plfun(@counter) when (@counter < 200) {
  .pl-@{counter} {
    padding-left: unit(@counter * @PX_TO_REM, rem);
  }

  .plfun((@counter + 5)); // 递归调用自身
}

.pl(@counter) {
  padding-left: unit(@counter * @PX_TO_REM, rem);
}

.prfun(@counter) when (@counter < 200) {
  .pr-@{counter} {
    padding-right: unit(@counter * @PX_TO_REM, rem);
  }

  .prfun((@counter + 5)); // 递归调用自身
}

.pr(@counter) {
  padding-right: unit(@counter * @PX_TO_REM, rem);
}

.pbfun(@counter) when (@counter < 200) {
  .pb-@{counter} {
    padding-bottom: unit(@counter * @PX_TO_REM, rem);
  }

  .pbfun((@counter + 5)); // 递归调用自身
}

.pb(@counter) {
  padding-bottom: unit(@counter * @PX_TO_REM, rem);
}

.plr(@counter) {
  .pl(@counter);
  .pr(@counter);
}

.ptb(@counter) {
  .pt(@counter);
  .pb(@counter);
}

.mtb(@counter) {
  .mt(@counter);
  .mb(@counter);
}

.mlr(@counter) {
  .ml(@counter);
  .mr(@counter);
}

.mtb(@counter) {
  .mt(@counter);
  .mb(@counter);
}

.flexcenter() {
  display: flex;
  align-items: center;
  justify-content: center;
}

.flexrow() {
  display: flex;
  display: -webkit-box;
  display: -webkit-flex;
  -webkit-box-orient: horizontal;
  -webkit-box-direction: normal;
  -webkit-flex-direction: row;
  flex-direction: row;
}

.flexcolumn() {
  display: flex;
  display: -webkit-box;
  display: -webkit-flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: vertical;
  -webkit-flex-direction: column;
  flex-direction: column;
}

.flexavg() {
  align-items: space-between;
  justify-content: space-between;
}

.flexaround() {
  align-items: space-around;
  justify-content: space-around;
}

.absolute(@b, @bottom: bottom) {
  position: absolute;
  @{bottom}: @b;
}

.fixed(@b, @bottom: bottom) {
  position: absolute;
  @{bottom}: @b;
}

.fs(@px) {
  font-size: unit(@px * @PX_TO_REM, rem);
}

/*----- 宽度 -----*/
.w(@px) {
  width: unit(@px * @PX_TO_REM, rem);
}

/*----- 高度 -----*/
.h(@px) {
  height: unit(@px * @PX_TO_REM, rem);
}

.wh(@px) {
  .w(@px);
  .h(@px);
}

/*----- 行高 -----*/
.lh(@px) {
  line-height: unit(@px * @PX_TO_REM, rem);
}

.px2rem(@px) {
  unit(@px * @PX_TO_REM, rem);
}

.bottom(@px) {
  bottom: unit(@px * @PX_TO_REM, rem);
}

.right(@px) {
  right: unit(@px * @PX_TO_REM, rem);
}

.top(@px) {
  top: unit(@px * @PX_TO_REM, rem);
}

.left(@px) {
  left: unit(@px * @PX_TO_REM, rem);
}

.txt() {
  text-align: justify;
  text-align-last: left;
}

.bgcover() {
  background-size: cover;
  background-repeat: no-repeat;
  background-position: center;
}

.bgcontain() {
  background-size: contain;
  background-repeat: no-repeat;
  background-position: center;
}

.letterspacing(@fs, @sp) {
  /* letter-spacing: unit(@fs * @sp /1000 * @PX_TO_REM, rem); */
  letter-spacing: unit(@sp / 1000, em);
}

.letterspacingmr(@fs, @sp) {
  /* letter-spacing: unit(@fs * @sp /1000 * @PX_TO_REM, rem); */
  margin-right: unit(-@sp / 1000, em);
}

.cnleft() {
  margin-left: -0.18em;
}

.letterspacingcn(@fs, @sp) {
  &::first-letter {
    margin-left: -0.18em;
  }

  /* letter-spacing: unit(@fs * @sp /1000 * @PX_TO_REM, rem); */
  letter-spacing: unit(@sp / 1000 * 1.396, em);
}

.ha() {
  height: auto;
}

.icon() {
  display: inline-block;
  object-fit: contain;
}

.fix-bottom(@n) {
  position: absolute;
  width: 100%;
  .bottom(@n);
}
