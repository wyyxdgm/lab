@import './func-common.css';

.mtfun(@counter) when (@counter < 200) {
  .mt-@{counter} {
    margin-top: unit(@counter, px);
  }

  .mtfun((@counter + 5)); // 递归调用自身
}

.mt(@counter) {
  margin-top: unit(@counter, px);
}

.mlfun(@counter) when (@counter < 200) {
  .ml-@{counter} {
    margin-left: unit(@counter, px);
  }

  .mlfun((@counter + 5)); // 递归调用自身
}

.ml(@counter) {
  margin-left: unit(@counter, px);
}

.mrfun(@counter) when (@counter < 200) {
  .mr-@{counter} {
    margin-right: unit(@counter, px);
  }

  .mrfun((@counter + 5)); // 递归调用自身
}

.mr(@counter) {
  margin-right: unit(@counter, px);
}

.mbfun(@counter) when (@counter < 200) {
  .mb-@{counter} {
    margin-bottom: unit(@counter, px);
  }

  .mbfun((@counter + 5)); // 递归调用自身
}

.mb(@counter) {
  margin-bottom: unit(@counter, px);
}

.ma() {
  margin-left: auto;
  margin-right: auto;
}

.mlr(@counter) {
  .ml(@counter);
  .mr(@counter);
}

.ptfun(@counter) when (@counter < 200) {
  .pt-@{counter} {
    padding-top: unit(@counter, px);
  }

  .ptfun((@counter + 5)); // 递归调用自身
}

.pt(@counter) {
  padding-top: unit(@counter, px);
}

.plfun(@counter) when (@counter < 200) {
  .pl-@{counter} {
    padding-left: unit(@counter, px);
  }

  .plfun((@counter + 5)); // 递归调用自身
}

.pl(@counter) {
  padding-left: unit(@counter, px);
}

.prfun(@counter) when (@counter < 200) {
  .pr-@{counter} {
    padding-right: unit(@counter, px);
  }

  .prfun((@counter + 5)); // 递归调用自身
}

.pr(@counter) {
  padding-right: unit(@counter, px);
}

.pbfun(@counter) when (@counter < 200) {
  .pb-@{counter} {
    padding-bottom: unit(@counter, px);
  }

  .pbfun((@counter + 5)); // 递归调用自身
}

.pb(@counter) {
  padding-bottom: unit(@counter, px);
}

.plr(@counter) {
  .pl(@counter);
  .pr(@counter);
}

.ptb(@counter) {
  .pt(@counter);
  .pb(@counter);
}

.mtb(@counter) {
  .mt(@counter);
  .mb(@counter);
}

.absolute(@b, @bottom: bottom) {
  position: absolute;
  @{bottom}: @b;
}

.fixed(@b, @bottom: bottom) {
  position: absolute;
  @{bottom}: @b;
}

.fs(@px) {
  font-size: unit(@px, px);
}

/*----- 宽度 -----*/
.w(@px) {
  width: unit(@px, px);
}

/*----- 高度 -----*/
.h(@px) {
  height: unit(@px, px);
}

.wh(@px) {
  .w(@px);
  .h(@px);
}

/*----- 行高 -----*/
.lh(@px) {
  line-height: unit(@px, px);
}

.bottom(@px) {
  bottom: unit(@px, px);
}

.right(@px) {
  right: unit(@px, px);
}

.top(@px) {
  top: unit(@px, px);
}

.left(@px) {
  left: unit(@px, px);
}

.txt() {
  text-align: justify;
  text-align-last: left;
}

.bgcover() {
  background-size: cover;
  background-repeat: no-repeat;
  background-position: center;
}

.bgcontain() {
  background-size: contain;
  background-repeat: no-repeat;
  background-position: center;
}

.letterspacing(@fs, @sp) {
  letter-spacing: unit(@fs * @sp /1000, px);
}

.letterspacingcn(@fs, @sp) {
  &::first-letter {
    margin-left: -0.18em;
  }

  letter-spacing: unit(@fs * @sp / 1000, px);
}

.letterspacingcnmargin(@fs, @sp) {
  margin-left: -0.18em;

  letter-spacing: unit(@fs * @sp / 1000, px);
}

.cnleft() {
  margin-left: -0.18em;
}

.ha() {
  height: auto;
}

.icon() {
  display: inline-block;
  object-fit: contain;
}

.nowrap() {
  white-space: nowrap;
}


.fix-bottom(@n) {
  position: absolute;
  width: 100%;
  .bottom(@n);
}





/* effects */
.imagehover() {
  position: relative;
  overflow: hidden;

  img {
    transform: scale(1);
    transition: all 0.8s ease-in-out;

    &:hover {
      transform: scale(1.05);
    }
  }

}

.hover-to-has-image() {
  /* position: relative; */

  .hover-image {
    position: absolute;
    left: 0;
    top: 0;
    bottom: 0;
    right: 0;
    width: 100%;
    height: 100%;
    opacity: 0;
    pointer-events: none;
    object-fit: cover;
    transition: opacity .8s ease-out;
  }

  &:hover {
    .hover-image {
      opacity: 1;
    }
  }

}

.hover-to-has-image-fullview() {
  position: relative;

  .block-alone-bg {
    background-position: bottom center;
  }

  /* .block-alone-bg {
    background-color: #000;
    background-size: cover;
    position: fixed;
    left: 0;
    top: 0;
    bottom: 0;
    right: 0;
    width: 100vw;
    height: 100vh;
    opacity: 0;
    pointer-events: none;
    object-fit: cover;
    transition: opacity .8s ease-out;
  } */
  .block-alone {
    .flexcenter();
    position: absolute;
    left: 0;
    top: 0;
    right: 0;
    bottom: 0;
    z-index: 99;
  }

  &:hover {

    .block-alone {
      background: white;
    }

    /* 
    .block-alone-bg {
      opacity: 1;
      z-index: 98;
    } */
  }

}

.hover-opacity40() {
  &:hover {
    opacity: .4;
  }
}

.hover-opacity50() {
  &:hover {
    opacity: .5;
  }
}

.hide() {
  opacity: 0;
  pointer-events: none;
}

.show() {
  opacity: 1;
  pointer-events: auto;
}
